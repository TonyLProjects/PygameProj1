


Library used: Pygames

TODO:
	design player locationBox:
		similar to hurtbox
		only check if players are moving forward
		if player location Box collide, check both player's movement direction
			if p1->move forward p2->still:
				move p2 back slowly
			elif p1->move forward, p2->move forward:
				both players are still


Game logic flow:
	init objects
	while not end game:
		take input 
		process input <- may be mart of update
		update

take input(events, keydown):
	return final player action
	


	
update(player, action)
	process action(player obj, action)
		verify action validity
		if valid-> initialize action 	(else ignore action)

	update frame counters
	change character states
		state change from:

		-end of frame timer
		-hitbox/hurtbox detection
		-update UI



	

Game character states:

	operation states
		canTakeAction
			false if hitstunned, blocking, knowckdown
			can only be in 1 hit state at any time

	movement states
		can move only if canTakeAction == true


		still


		forewardMove
		backwardMove
			0 frame activation, 0 frame timer
			state != jump, attack, hitstunned, knowckdown, blocking

			if key.pressed == Left || Right 
				check move direction vs player 2 direction
				move x, velocity based on foreward/backward

		forewardJump
		backwardJump
		verticalJump
			x frame activation, y frame timer
			state != jump, attack, hitstunned, knowckdown, blocking

			if key.pressed = jump 
				check direction condition
				jump(direction)
				state == jump

		crouch
			state != jump, attack, hitstunned, knowckdown, blocking

	attack states:
		jumpAttack
		crouchAttack
		normalAttack
			state != jump, attack, hitstunned, knowckdown, blocking

			create + draw hurtbox
			hitDetect(hurtbox vertices, hitbox vertices, hitter)
				if hit-> hurtter stunned

		grapple

	hit states:
		hitstunned
		blocking
		knockDown


	Super?
		stops all movement, track opponent state and position, modify frame advantage


attack moves should be defined in player class, calls only takes button input




	

special moves implementation: 
	input buffer using circular queue
	only takes in the pressed events

Previous movement design

movement logic handling:

	direction -> can be represented in FSM (5 states)
		condition variables:
			currentDirection
				at the end of if statement checks, update position based on currentDirection
			previousDirection

			curr and prev can never be the same direction
			curr and prev initialized to 0
			1 = forward
			-1 = backward

		INITIAL STATE
		if prev = 0 and curr = 0
			if press F
				curr = 1
			if press B
				curr = -1
			// no release action

		STATE 1
		elif prev = 0 and curr = 1
			if release F
				curr = 0

			if press B
				prev = curr
				curr = neg(curr)

			cannot release B, cannot press F
		STATE 2
		elif prev = 0 curr = -1
			same logic as above

		STATE 3
		elif prev = 1 curr = -1
			if release B  	(return to state 1)
				curr = prev
				prev = 0
			if release F 	(return to state 2)
				prev = 0

			if press F 		(go to state 4)
				prev = curr
				curr = 1

		elif prev = -1 curr = 1
			same logic as above




input handling design:
	jumping uses the next frame to detect directional action
		POSSIBLE BUG: jump+direction+attack might become vertical jump + attack
			solution: extend detection frame to 3?


	things to do in input handle
		left right movement
		jump
		crouch
		attack
		input buffer update
		input buffer check

		action priority hierarchy
			super			(from buffer)
			special move 	(from buffer)
			attack 			(priority decided by code order)
			jump
			crouch
			left/right movement


input handling flow chart:

	input ->	character command 	->	action processing ->	update character/game
		 \->	save input to buffer		



should player hurtbox be constantly calculated or should it be created when an event might trigger hitbox collision?

attack psudo code:
	in player, attack initiation:
		change character status to attacking, specify which type
		init frame counter
	in update(hurtBoxCollisionDetection() and player.tick()):
		check frame count and create hitbox/hurtbox according to move
			usually hitbox does not exist for first few frames(move initiating frames)
	in render:
		read player move status and frame counter
			draw body part according to these info



list of special inputs:
	Quarter circle forward/backward
	half circle forward/backward
	full circle forward/backward
	Dragon Punch forward/backward
	Charge inputs
	dash

options:
	1:
	make input buffer a list of input structs
	remove input from queue when frameSinceCreation exceed a limit

		input structs definition:
			int frameSinceCreation
			string input

		checking special moves would require checking the entire buffer every time

	2:
	dequeue only if buffer exceed size limit or
	if input is accepted and used (regardless of initialized or not)
		checking still cycles through the entire buffer

	3:
	dequeue if no previous inputs are directional, 

	if input is directional:
		check flag = 1
		enqueue()

	4:
	check inputs in reverse:
		not intuitive to implement

	5:
	special input always start with direction (except hold)


start from the end
	check latest frame timer
	if directional:
		check dash
	if isAction:
		check special move in reverse

		detection buffer[0] = inputBuffer[endOfQueue]
		if latest isAction:
			if prev isAction and time is recent:
				detectionBuffer[0] = inputBuffer[prev]
			if prev isDirection and time is recent:
				if prev match any of the accepted sequence:
### Do this
Primitive implementation:
	Psudo code:
		start from end of buffer:
			does last x inputs match perfectly to any of the accepted sequence of inputs:
			if yes:
				init detected move
			dequeue end of buffer until buffer is within size limit

	directional input error tolerance need to be hard coded
	but it works
	does not handle multiple inputs in the same frame
###


	for hold action:
	Primitive implementation:
		holdBuffer[? size]
		if latest input.type == release:
			scan whole array:
			if inputbBuffer[i].type == keydown:
				stop scanning
			else: if inputBuffer[i].key == latest input.key:
				holdBuffer.append(inputBuffer[i])
		if holdBuffer.size > accepted hold timer (or if the press action is early enough):
			init hold special move

	Problem:
		hold is reset when hit by attacks so the states is coupled with other elements than input.











			

